import os
import requests
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
def generate_random_login(length=10):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å—å–º–∞
def get_messages(login, domain):
    url = f"https://www.1secmail.com/api/v1/?action=getMessages&login={login}&domain={domain}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∏—Å—å–º–∞
def get_mail_content(login, domain, message_id):
    url = f"https://www.1secmail.com/api/v1/?action=readMessage&login={login}&domain={domain}&id={message_id}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return {}

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /mail —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É.")

@dp.message_handler(commands=['mail'])
async def cmd_mail(message: types.Message):
    login = generate_random_login()
    domain = "1secmail.com"
    email = f"{login}@{domain}"
    
    await message.answer(f"–í–æ—Ç —Ç–≤–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:\nüìß {email}\n\n–ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –Ω–∞–ø–∏—à–∏ /inbox —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –∏ –¥–æ–º–µ–Ω –≤ –ø–∞–º—è—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    with open(f"{message.from_user.id}.txt", "w") as f:
        f.write(f"{login},{domain}")

@dp.message_handler(commands=['inbox'])
async def cmd_inbox(message: types.Message):
    try:
        with open(f"{message.from_user.id}.txt", "r") as f:
            login, domain = f.read().split(",")
    except FileNotFoundError:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—á—Ç—É —Å –ø–æ–º–æ—â—å—é /mail")
        return

    messages = get_messages(login, domain)
    if not messages:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º.")
    else:
        reply = "üì¨ –í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞:\n"
        for msg in messages:
            content = get_mail_content(login, domain, msg['id'])
            reply += f"\nüì® –û—Ç: {msg['from']}\n–¢–µ–º–∞: {msg['subject']}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {content.get('textBody', '')[:200]}...\n"
        await message.answer(reply)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)